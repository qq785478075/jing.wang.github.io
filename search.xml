<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo增加搜索功能</title>
      <link href="/Hexo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/Hexo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>随着时间的推移，博客文章越来越多。为了方便快速找到文章，增加一个站点内的搜索功能是非常必要的。<br><a id="more"></a></p><p>#具体操作：<br>1.安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></p><p>2.全局配置文件_config.yml，新增如下内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p><p>3.hexo主题配置文件（\themes\next_config.yml），修改local_search的enable为true：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序实现元素拖动效果</title>
      <link href="/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E6%8B%96%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
      <url>/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E6%8B%96%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>实现客服按钮在页面区域可拖动功能;<br><a id="more"></a></p><p>效果图如下：<br><img src="/images/2020-07-06_144728.png" alt></p><h1 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h1><ol><li><p>首先要定义一个容器,使元素在这个容器范围内可来回拖动；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">movable-area</span> <span class="attr">class</span>=<span class="string">"contact_box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">movable-view</span> <span class="attr">class</span>=<span class="string">"contact_conten"</span> <span class="attr">x</span>=<span class="string">"&#123;&#123;x&#125;&#125;"</span> <span class="attr">y</span>=<span class="string">"&#123;&#123;y&#125;&#125;"</span> <span class="attr">direction</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">"contact"</span> <span class="attr">class</span>=<span class="string">"contact"</span> <span class="attr">bindcontact</span>=<span class="string">"handleContact"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"/img/customer_service.png"</span> <span class="attr">class</span>=<span class="string">"contact_icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">movable-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movable-area</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改css样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.contact_box&#123;</span><br><span class="line">  width: 100vw;</span><br><span class="line">  height: 92vh;</span><br><span class="line">  position: fixed; </span><br><span class="line">&#125;</span><br><span class="line">.contact_conten&#123;</span><br><span class="line">  width: fit-content;</span><br><span class="line">  height: fit-content; </span><br><span class="line">  position: fixed; </span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.contact&#123;</span><br><span class="line">  background: transparent;</span><br><span class="line">  border-color:transparent;</span><br><span class="line">  padding-left: 0;</span><br><span class="line">  padding-right: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.contact::after&#123;</span><br><span class="line">  border-color:transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.contact .contact_icon&#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 140rpx;</span><br><span class="line">  height: 160rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改js部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    y:wx.getSystemInfoSync().windowHeight,</span><br><span class="line">    x:wx.getSystemInfoSync().windowWidth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>微信 小程序官方文档说明<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/movable-view.html" target="_blank" rel="noopener"><font color="red">官方链接</font></a><br><img src="/images/2020-07-06_151027.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序分包</title>
      <link href="/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%86%E5%8C%85/"/>
      <url>/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%86%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>因为微信小程序目前限制在<font color="red">2M</font>以内，如果程序安装包超过<font color="red">2M</font>可以通过分包加载，但是分包后整个小程序所有分包大小不能超过<font color="red">16M</font><br><a id="more"></a></p><p><img src="/images/2020-07-06_102851.png" alt></p><h1 id="具体操作-在-app-json-subpackages-字段声明项目分包结构："><a href="#具体操作-在-app-json-subpackages-字段声明项目分包结构：" class="headerlink" title="具体操作,在 app.json subpackages 字段声明项目分包结构："></a>具体操作,在 app.json subpackages 字段声明项目分包结构：</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">"subpackages": [</span><br><span class="line">  &#123;</span><br><span class="line">    "root": "pages/packageA", //分包根目录 指定 根目录下的文件夹</span><br><span class="line">    "name": "pack1", //分包别名，分包预下载时可以使用</span><br><span class="line">    "independent" : false, // 分包是否是独立分包</span><br><span class="line">    "pages": [</span><br><span class="line">      "pages/cat", //分包页面路径，相对与分包根目录</span><br><span class="line">      "pages/dog"</span><br><span class="line">    ]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    "root": "packageB",</span><br><span class="line">    "name": "pack2",</span><br><span class="line">    "pages": [</span><br><span class="line">      "pages/apple",</span><br><span class="line">      "pages/banana"</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="打包原则"><a href="#打包原则" class="headerlink" title="打包原则"></a>打包原则</h1><ul><li>声明 subpackages 后，将按 subpackages 配置路径进行打包，subpackages 配置路径外的目录将被打包到 app（主包） 中</li><li>app（主包）也可以有自己的 pages（即最外层的 pages 字段）</li><li>subpackage 的根目录不能是另外一个 subpackage 内的子目录</li><li>tabBar 页面必须在 app（主包）内</li></ul><h1 id="引用原则"><a href="#引用原则" class="headerlink" title="引用原则"></a>引用原则</h1><ul><li>packageA 无法 require packageB JS 文件，但可以 require app、自己 package 内的 JS 文件</li><li>packageA 无法 import packageB 的 template，但可以 require app、自己 package 内的 template</li><li>packageA 无法使用 packageB 的资源，但可以使用 app、自己 package 内的资源</li></ul><p>独立分包是小程序中一种特殊类型的分包，可以独立于主包和其他分包运行。从独立分包中页面进入小程序时，不需要下载主包。当用户进入普通分包或主包内页面时，主包才会被下载。</p><p>开发者可以按需将某些具有一定功能独立性的页面配置到独立分包中。当小程序从普通的分包页面启动时，需要首先下载主包；而独立分包不依赖主包即可运行，可以很大程度上提升分包页面的启动速度。</p><p>一个小程序中可以有多个独立分包。</p><h1 id="使用独立分包时要注意："><a href="#使用独立分包时要注意：" class="headerlink" title="使用独立分包时要注意："></a>使用独立分包时要注意：</h1><ul><li>独立分包中不能依赖主包和其他分包中的内容，包括js文件、template、wxss、自定义组件、插件等。主包中的app.wxss对独立分包无效，应避免在独立分包页面中使用 app.wxss 中的样式；</li><li>App 只能在主包内定义，独立分包中不能定义 App，会造成无法预期的行为；</li><li>独立分包中暂时不支持使用插件。<h1 id="关于-getApp"><a href="#关于-getApp" class="headerlink" title="关于 getApp()"></a>关于 getApp()</h1>与普通分包不同，独立分包运行时，App 并不一定被注册，因此 getApp() 也不一定可以获得 App 对象：</li></ul><p>当用户从独立分包页面启动小程序时，主包不存在，App也不存在，此时调用 getApp() 获取到的是 undefined。 当用户进入普通分包或主包内页面时，主包才会被下载，App 才会被注册。<br>当用户是从普通分包或主包内页面跳转到独立分包页面时，主包已经存在，此时调用 getApp() 可以获取到真正的 App。<br>由于这一限制，开发者无法通过 App 对象实现独立分包和小程序其他部分的全局变量共享。</p><p>为了在独立分包中满足这一需求，基础库 2.2.4 版本开始 getApp支持 [allowDefault]参数，在 App 未定义时返回一个默认实现。当主包加载，App 被注册时，默认实现中定义的属性会被覆盖合并到真正的 App 中。</p><p>当从独立分包启动小程序时，主包中 App 的 onLaunch 和首次 onShow 会在从独立分包页面首次进入主包或其他普通分包页面时调用。</p><p>由于独立分包中无法定义 App，小程序生命周期的监听可以使用 wx.onAppShow，wx.onAppHide 完成。App 上的其他事件可以使用 wx.onError，wx.onPageNotFound 监听</p><p>预下载分包行为在进入某个页面时触发，通过在 app.json 增加 preloadRule 配置来控制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "pages": ["pages/index"],</span><br><span class="line">  "subpackages": [</span><br><span class="line">    &#123;</span><br><span class="line">      "root": "important",</span><br><span class="line">      "pages": ["index"],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "root": "sub1",</span><br><span class="line">      "pages": ["index"],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "hello",</span><br><span class="line">      "root": "path/to",</span><br><span class="line">      "pages": ["index"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "root": "sub3",</span><br><span class="line">      "pages": ["index"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "root": "indep",</span><br><span class="line">      "pages": ["index"],</span><br><span class="line">      "independent": true</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "preloadRule": &#123;</span><br><span class="line">    "pages/index": &#123;</span><br><span class="line">      "network": "all",</span><br><span class="line">      "packages": ["important"]</span><br><span class="line">    &#125;,</span><br><span class="line">    "sub1/index": &#123;</span><br><span class="line">      "packages": ["hello", "sub3"]</span><br><span class="line">    &#125;,</span><br><span class="line">    "sub3/index": &#123;</span><br><span class="line">      "packages": ["path/to"]</span><br><span class="line">    &#125;,</span><br><span class="line">    "indep/index": &#123;</span><br><span class="line">      "packages": ["__APP__"]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><p>同一个分包中的页面享有共同的预下载大小限额 2M，限额会在工具中打包时校验。<br>如，页面 A 和 B 都在同一个分包中，A 中预下载总大小 0.5M 的分包，B中最多只能预下载总大小 1.5M 的分包。</p><p>原文转至: <a href="https://www.cnblogs.com/wen-/p/12109247.html" target="_blank" rel="noopener">https://www.cnblogs.com/wen-/p/12109247.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 多台电脑配置</title>
      <link href="/Hexo%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE/"/>
      <url>/Hexo%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Hexo 多台电脑配置<br><a id="more"></a></p><p>在之前的一篇文章中描述了<a href="/Hexo-github搭建博客笔记/#more"><font color="red">Hexo 加 github搭建</font></a>怎么从零开始搭建、备份<font font-size="12px" color="blue">个人博客</font>的文章</p><p>今天说一下多台电脑同时配置 hexo</p><p>首先确保自己已经使用hexo在github搭建好了自己的个人博客。<br><img src="/images/2020-07-03_162103.png" alt></p><p>对username.github.io仓库 hexo分支拉取到本地;<br>命令如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/*****/****.github.io.git</span><br></pre></td></tr></table></figure></p><p>此时从github 拉取的代码为 master主分支 这是我们需要切换分支，命令如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git chckout hexo</span><br><span class="line">//hexo 为切换分支的名称</span><br></pre></td></tr></table></figure></p><p>此时本地会有一个新的hexo项目，但是由于.gitignore文件中过滤了node_modules\，所以克隆下来的目录里没有node_modules\，这是hexo所需要的组件，所以要在该目录中重新安装hexo，但不需要hexo init。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install hexo --save</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>####新建一篇文章测试<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s //本地服务</span><br></pre></td></tr></table></figure></p><p>####推送到hexo分支<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "add work PC test"</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></p><p>####部署到master分支<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p>####日常操作<br>如果上面的过程都操作无误的话，你就可以在任何能联网的电脑上写博客啦。一般写博客的流程是下面这样。</p><p>####写博客前<br>不管你本地的仓库是否是最新的，都先pull一下，以防万一：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin hexo</span><br></pre></td></tr></table></figure></p><p>写博客<br>hexo new “title”<br>然后打开source/_posts/title.md，撰写博文。</p><p>写完博客<br>先推送到hexo分支上：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "add work PC test"</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></p><p>最后部署到master分支上<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p>整个流程大概就是这样。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 错误记录</title>
      <link href="/hexo%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
      <url>/hexo%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p> Hexo 错误记录<br><a id="more"></a></p><p>大致错误如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The "mode" argument must be integer. Receivedan instance of Object</span><br></pre></td></tr></table></figure></p><p><img src="/images/1593746937.jpg" alt></p><p>在百度多次搜索、验证，验证找到错误原因为node.js版本太高导致，但是自己又不想卸载原本的nodejs版本，所以在网上找了个叫 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener"><font color="red">nvm</font></a> 的工具降低 node的版本；接下来就可以 <font color="red">hexo g -d</font>  完美解决此次错误</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: ERROR: The key you are authenticating with has been marked as read only.</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><p><img src="/images/1593748047(1" alt>.jpg)<br><img src="/images/2020-07-03_132647.png" alt></p><p>在配置ssh key文件时勾选上<font color="red">Allow write access</font> 选项</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序保存海报</title>
      <link href="/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BF%9D%E5%AD%98%E6%B5%B7%E6%8A%A5/"/>
      <url>/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BF%9D%E5%AD%98%E6%B5%B7%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<p>微信小程序实现用户选择图片实现保存海报功能<br><a id="more"></a></p><p>***.wxml<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'friend-layer2'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'invitation_method'</span>&gt;</span>邀请方式2：<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'poster_box'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'poster_img_box'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"page-section page-section-spacing swiper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">current</span>=<span class="string">'&#123;&#123;currentInd&#125;&#125;'</span> <span class="attr">skip-hidden-item-layout</span>=<span class="string">"true"</span> <span class="attr">indicator-dots</span>=<span class="string">"true"</span> <span class="attr">circular</span>=<span class="string">"true"</span> <span class="attr">indicator-color</span>=<span class="string">"#E7EAED"</span> <span class="attr">indicator-active-color</span>=<span class="string">"#FF9310"</span> <span class="attr">bindchange</span>=<span class="string">"imgChange"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;background&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"project_type"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"swiper-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">'&#123;&#123;item.image_server_path&#125;&#125;'</span> <span class="attr">class</span>=<span class="string">"bj"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;QRCode&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"QRCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'sava_btn'</span> <span class="attr">size</span>=<span class="string">'mini'</span> <span class="attr">bindtap</span>=<span class="string">'saveImage'</span>&gt;</span>保存海报<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"myCanvas"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"myCanvas"</span> <span class="attr">canvas-id</span>=<span class="string">"myCanvas"</span> <span class="attr">style</span>=<span class="string">"width: 750rpx; height: 1334rpx;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  ***.wxss<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">.friend-layer2 &#123;</span><br><span class="line">  padding: 30rpx 40rpx;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 820rpx;</span><br><span class="line">  background: rgba(255, 255, 255, 1);</span><br><span class="line">  border-radius: 12rpx;</span><br><span class="line">  margin-top: 30rpx;</span><br><span class="line">  padding: 0rpx 30rpx;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box .title &#123;</span><br><span class="line">  font-size: 24rpx;</span><br><span class="line">  font-family: PingFangSC-Regular;</span><br><span class="line">  font-weight: 400;</span><br><span class="line">  color: #333;</span><br><span class="line">  padding: 40rpx 0rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box .poster_img_box &#123;</span><br><span class="line">  width: 325rpx;</span><br><span class="line">  height: 562rpx;</span><br><span class="line">  margin: auto;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box .poster_img_box .poster_img_bg &#123;</span><br><span class="line">  width: 325rpx;</span><br><span class="line">  height: 562rpx;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box .poster_img_box .poster_img_bg image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box  .swiper &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 309rpx;</span><br><span class="line">  height: 546rpx;</span><br><span class="line">  top: 8rpx;</span><br><span class="line">  left: 8rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box  swiper &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  /* overflow: hidden; */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box  swiper .swiper-item &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box  swiper .swiper-item .bj &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box  swiper .swiper-item .QRCode &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 80rpx;</span><br><span class="line">  height: 80rpx;</span><br><span class="line">  display: block;</span><br><span class="line">  bottom: 55rpx;</span><br><span class="line">  right: 112rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.friend-layer2  .poster_box .sava_btn &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translateX(-50%);</span><br><span class="line">  margin-top: 40rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.myCanvas &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: -1000px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sava_btn &#123;</span><br><span class="line">  background: #ff9310;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>**</em>.js<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  background: [],</span><br><span class="line">  QRCode: '', //二维码</span><br><span class="line">  HeadImg: '', //用户头像</span><br><span class="line">  currentInd: 0, //海报默认选中下标</span><br><span class="line">  hasSave: false,</span><br><span class="line">&#125;,</span><br><span class="line">  //获取图片</span><br><span class="line">getImage: function() &#123;</span><br><span class="line">  request.wxCheckSess().then(res =&gt; &#123;</span><br><span class="line">    let url = rurl.serviceAdd + 'freelancer/load-qr-code-and-poster-path';</span><br><span class="line">    let data = &#123;</span><br><span class="line">      project_type: 0</span><br><span class="line">    &#125;</span><br><span class="line">    request.$http(url, data, 'GET').then(res =&gt; &#123;</span><br><span class="line">      if (res &amp;&amp; res.code == 1000 &amp;&amp; res.data) &#123;</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          background: res.data.posterPath,</span><br><span class="line">          QRCode: 'data:image/jpeg;base64,' + res.data.base64, //二维码</span><br><span class="line">          HeadImg: 'data:image/jpeg;base64,' + res.data.headerBase64</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).catch()</span><br><span class="line">&#125;,</span><br><span class="line">//设置海报二维码、头像宽高</span><br><span class="line">setImageWidth() &#123;</span><br><span class="line">  let currentInd = this.data.currentInd; //海报选中下标</span><br><span class="line">  let posterObj = this.data.background[currentInd]; //选中海报</span><br><span class="line">  //二维码位置、大小</span><br><span class="line">  let image_x = parseFloat(posterObj.image_x) / 2 * multiple;</span><br><span class="line">  let image_y = parseFloat(posterObj.image_y) / 2 * multiple;</span><br><span class="line">  let width = parseFloat(posterObj.width) / 2 * multiple;</span><br><span class="line">  let height = parseFloat(posterObj.height) / 2 * multiple;</span><br><span class="line"></span><br><span class="line">  //头像位置、大小</span><br><span class="line">  let header_image_x = parseFloat(posterObj.header_image_x) / 2 * multiple;</span><br><span class="line">  let header_image_y = parseFloat(posterObj.header_image_y) / 2 * multiple;</span><br><span class="line">  let header_width = parseFloat(posterObj.header_width) / 2 * multiple;</span><br><span class="line">  let header_height = parseFloat(posterObj.header_height) / 2 * multiple;</span><br><span class="line"></span><br><span class="line">  //canvas画圆头像半径 、位置 </span><br><span class="line">  let circle_r = header_height / 2;</span><br><span class="line">  let circle_x = header_image_x + circle_r;</span><br><span class="line">  let circle_y = header_image_y + circle_r;</span><br><span class="line">&#125;,</span><br><span class="line">//海报选中改变了</span><br><span class="line">imgChange: function(e) &#123;</span><br><span class="line">  let currentInd = e.detail.current;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    currentInd: currentInd</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">//海报保存</span><br><span class="line">saveImage: function() &#123;</span><br><span class="line">  wx.showLoading(&#123;</span><br><span class="line">    title: '保存中...',</span><br><span class="line">    mask: true</span><br><span class="line">  &#125;)</span><br><span class="line">  if (this.data.hasSave) &#123;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      title: '请稍后...',</span><br><span class="line">      icon: 'none',</span><br><span class="line">      duration: 2000,</span><br><span class="line">      mask: true</span><br><span class="line">    &#125;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    hasSave: true</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  wx.getSetting(&#123;</span><br><span class="line">    success: res =&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">      console.log(res.authSetting['scope.writePhotosAlbum'], !res.authSetting['scope.writePhotosAlbum'])</span><br><span class="line">      if (res.authSetting['scope.writePhotosAlbum'] == undefined) &#123;</span><br><span class="line">        console.log(1)</span><br><span class="line">        this.save()</span><br><span class="line">      &#125; else if (res.authSetting['scope.writePhotosAlbum'] == false) &#123;</span><br><span class="line">        console.log(2)</span><br><span class="line">        wx.openSetting(&#123;</span><br><span class="line">          "scope.writePhotosAlbum": true</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        console.log(3)</span><br><span class="line">        this.save()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">save: function() &#123;</span><br><span class="line">  // 保存到本地</span><br><span class="line">  const canvas = wx.createCanvasContext('myCanvas');</span><br><span class="line">  let currentInd = this.data.currentInd; //海报选中下标</span><br><span class="line">  let posterObj = this.data.background[currentInd]; //选中海报</span><br><span class="line">  let _this = this;</span><br><span class="line"></span><br><span class="line">  if (posterObj) &#123;</span><br><span class="line">    let BjImg = posterObj.image_server_path;</span><br><span class="line">    let QRCode = this.data.QRCode;</span><br><span class="line">    let HeadImg = this.data.HeadImg;</span><br><span class="line">    let multiple = getRatio(); //获取手机屏幕基于苹果7（375px） 的倍数</span><br><span class="line">    console.log(multiple)</span><br><span class="line"></span><br><span class="line">    //二维码位置、大小</span><br><span class="line">    let image_x = parseFloat(posterObj.image_x) / 2 * multiple;</span><br><span class="line">    let image_y = parseFloat(posterObj.image_y) / 2 * multiple;</span><br><span class="line">    let width = parseFloat(posterObj.width) / 2 * multiple;</span><br><span class="line">    let height = parseFloat(posterObj.height) / 2 * multiple;</span><br><span class="line"></span><br><span class="line">    //头像位置、大小</span><br><span class="line">    let header_image_x = parseFloat(posterObj.header_image_x) / 2 * multiple;</span><br><span class="line">    let header_image_y = parseFloat(posterObj.header_image_y) / 2 * multiple;</span><br><span class="line">    let header_width = parseFloat(posterObj.header_width) / 2 * multiple;</span><br><span class="line">    let header_height = parseFloat(posterObj.header_height) / 2 * multiple;</span><br><span class="line"></span><br><span class="line">    //canvas画圆头像半径 、位置 </span><br><span class="line">    let circle_r = header_height / 2;</span><br><span class="line">    let circle_x = header_image_x + circle_r;</span><br><span class="line">    let circle_y = header_image_y + circle_r;</span><br><span class="line"></span><br><span class="line">    //缓存海报背景</span><br><span class="line">    wx.getImageInfo(&#123;</span><br><span class="line">      src: BjImg,</span><br><span class="line">      success: function(res) &#123;</span><br><span class="line"></span><br><span class="line">        //canvas 绘制海报背景</span><br><span class="line">        canvas.drawImage(res.path, 0, 0, res.width / 2 * multiple, res.height / 2 * multiple);</span><br><span class="line">        //canvas 绘制图片 不支持 base64 图片</span><br><span class="line">        //把base64  转换成 图片路径</span><br><span class="line">        base64src(QRCode, res =&gt; &#123;</span><br><span class="line"></span><br><span class="line">          //缓存二维码</span><br><span class="line">          wx.getImageInfo(&#123;</span><br><span class="line">            src: res,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line"></span><br><span class="line">              canvas.drawImage(data.path, image_x, image_y, width, height);</span><br><span class="line"></span><br><span class="line">              //缓存用户头像</span><br><span class="line">              base64src(HeadImg, res =&gt; &#123;</span><br><span class="line">                wx.getImageInfo(&#123;</span><br><span class="line">                  src: res,</span><br><span class="line">                  success: function(res) &#123;</span><br><span class="line">                    canvas.save();</span><br><span class="line">                    canvas.beginPath();</span><br><span class="line"></span><br><span class="line">                    console.log(header_image_x, header_image_y, header_width, header_height, 'HeadImg');</span><br><span class="line">                    console.log(circle_x, circle_y, circle_r, 'circle');</span><br><span class="line"></span><br><span class="line">                    canvas.arc(circle_x, circle_y, circle_r, 0, 2 * Math.PI, false)</span><br><span class="line">                    canvas.clip();</span><br><span class="line">                    canvas.drawImage(res.path, header_image_x, header_image_y, header_width, header_height);</span><br><span class="line">                    canvas.restore();</span><br><span class="line"></span><br><span class="line">                    canvas.draw(false, () =&gt; &#123;</span><br><span class="line">                      wx.canvasToTempFilePath(&#123;</span><br><span class="line">                        x: 0,</span><br><span class="line">                        y: 0,</span><br><span class="line">                        width: 750,</span><br><span class="line">                        height: 1334,</span><br><span class="line">                        canvasId: 'myCanvas',</span><br><span class="line">                        fileType: 'jpg',</span><br><span class="line">                        success: (res) =&gt; &#123;</span><br><span class="line">                          let pic = res.tempFilePath;</span><br><span class="line"></span><br><span class="line">                          wx.saveImageToPhotosAlbum(&#123;</span><br><span class="line">                            filePath: pic,</span><br><span class="line">                            success(res) &#123;</span><br><span class="line">                              request.wxCheckSess().then(res =&gt; &#123;</span><br><span class="line">                                let jwtobj = wx.getStorageSync('jwtobj');</span><br><span class="line">                                request.getToken().then((jwtobj) =&gt; &#123;</span><br><span class="line">                                  wx.uploadFile(&#123;</span><br><span class="line">                                    url: rurl.serviceAdd + 'freelancer/upload-poster', //仅为示例，非真实的接口地址</span><br><span class="line">                                    filePath: pic,</span><br><span class="line">                                    name: 'file',</span><br><span class="line">                                    formData: &#123;</span><br><span class="line">                                      project_type: posterObj.project_type</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    header: &#123;</span><br><span class="line">                                      Authorization: "Bearer " + jwtobj.access_token</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    success(res) &#123;</span><br><span class="line">                                      wx.showToast(&#123;</span><br><span class="line">                                        title: '保存成功',</span><br><span class="line">                                        icon: 'success',</span><br><span class="line">                                        duration: 2000,</span><br><span class="line">                                        mask: true</span><br><span class="line">                                      &#125;);</span><br><span class="line">                                      let Timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">                                        _this.setData(&#123;</span><br><span class="line">                                          hasSave: false</span><br><span class="line">                                        &#125;)</span><br><span class="line">                                        clearTimeout(Timeout)</span><br><span class="line">                                      &#125;, 2000)</span><br><span class="line"></span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    fail: error =&gt; &#123;</span><br><span class="line">                                      wx.hideLoading();</span><br><span class="line">                                      wx.showToast(&#123;</span><br><span class="line">                                        title: '保存失败',</span><br><span class="line">                                        icon: 'none',</span><br><span class="line">                                        duration: 2000,</span><br><span class="line">                                        mask: true</span><br><span class="line">                                      &#125;);</span><br><span class="line">                                      _this.setData(&#123;</span><br><span class="line">                                        hasSave: false</span><br><span class="line">                                      &#125;)</span><br><span class="line">                                    &#125;</span><br><span class="line">                                  &#125;)</span><br><span class="line">                                &#125;)</span><br><span class="line">                              &#125;).catch()</span><br><span class="line">                            &#125;,</span><br><span class="line">                            fail: error =&gt; &#123;</span><br><span class="line">                              console.log(error)</span><br><span class="line">                              _this.setData(&#123;</span><br><span class="line">                                hasSave: false</span><br><span class="line">                              &#125;)</span><br><span class="line">                              wx.hideLoading();</span><br><span class="line">                              wx.showToast(&#123;</span><br><span class="line">                                title: '取消保存',</span><br><span class="line">                                icon: 'none',</span><br><span class="line">                                duration: 2000,</span><br><span class="line">                                mask: true</span><br><span class="line">                              &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                          &#125;);</span><br><span class="line"></span><br><span class="line">                        &#125;,</span><br><span class="line">                        fail: res =&gt; &#123;</span><br><span class="line">                          console.log(res);</span><br><span class="line">                          wx.hideLoading()</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                  &#125;,</span><br><span class="line">                  fail: res =&gt; &#123;</span><br><span class="line">                    console.log(res);</span><br><span class="line">                    wx.hideLoading()</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            fail: res =&gt; &#123;</span><br><span class="line">              console.log(res);</span><br><span class="line">              wx.hideLoading()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: res =&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        wx.hideLoading()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    // canvas.drawImage(QRCode, image_x, image_y, width, height);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h1><p><img src="/images/2020-07-06_113739.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序单选、多选样式修改</title>
      <link href="/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8D%95%E9%80%89%E3%80%81%E5%A4%9A%E9%80%89%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"/>
      <url>/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8D%95%E9%80%89%E3%80%81%E5%A4%9A%E9%80%89%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>微信小程序单选和多选框样式的修改<br><a id="more"></a></p><h1 id="单选框修改选中后的颜色"><a href="#单选框修改选中后的颜色" class="headerlink" title="单选框修改选中后的颜色"></a>单选框修改选中后的颜色</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/* 重写 radio 样式 */</span><br><span class="line"></span><br><span class="line">/* 未选中的 背景样式 */</span><br><span class="line"></span><br><span class="line">radio .wx-radio-input&#123;</span><br><span class="line">  border-radius: 50%;/* 圆角 */</span><br><span class="line">  width: 40rpx;</span><br><span class="line">  height: 40rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 这里如果不能修改背景颜色，在选中后的样式中添加background-color */</span><br><span class="line"></span><br><span class="line">/* 选中后的 背景样式 （红色背景 无边框 可根据UI需求自己修改） */</span><br><span class="line"></span><br><span class="line">radio .wx-radio-input.wx-radio-input-checked&#123;</span><br><span class="line">  border: none;</span><br><span class="line">  background: #FF903F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 选中后的 对勾样式 （白色对勾 可根据UI需求自己修改） */</span><br><span class="line"></span><br><span class="line">radio .wx-radio-input.wx-radio-input-checked::before&#123;</span><br><span class="line">  border-radius: 50%;/* 圆角 */</span><br><span class="line">  width: 40rpx; /* 选中后对勾大小，不要超过背景的尺寸 */</span><br><span class="line">  height: 40rpx; /* 选中后对勾大小，不要超过背景的尺寸 */</span><br><span class="line">  line-height: 40rpx;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#多选框修改选中后样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*checkbox 整体大小 */</span><br><span class="line"></span><br><span class="line">checkbox &#123;</span><br><span class="line">  width: 60rpx;</span><br><span class="line">  height: 60rpx;</span><br><span class="line">  line-height: 60rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*checkbox 选项框大小  */</span><br><span class="line"></span><br><span class="line">checkbox .wx-checkbox-input &#123;</span><br><span class="line">  width: 40rpx;</span><br><span class="line">  height: 40rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*checkbox选中后样式  */</span><br><span class="line"></span><br><span class="line">checkbox .wx-checkbox-input.wx-checkbox-input-checked &#123;</span><br><span class="line">  background: #0080FF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*checkbox选中后图标样式  */</span><br><span class="line"></span><br><span class="line">checkbox .wx-checkbox-input.wx-checkbox-input-checked::before &#123;</span><br><span class="line">  width: 40rpx;</span><br><span class="line">  height: 40rpx;</span><br><span class="line">  line-height: 40rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli 3.0</title>
      <link href="/vue-cli%203.0%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/vue-cli%203.0%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>vue-cli 3.0搭建项目<br><a id="more"></a></p><p>#安装全局快速原型设计<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure></p><p>#使用以下命令来创建新项目<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br><img src="/images/1593768388483.png" alt></p><p>这个默认的设置非常适合快速创建一个新项目的原型，而手动设置则提供了更多的选项，它们是面向生产的项目更加需要的。</p><p>如下图所示：<br><img src="/images/1593768385539.png" alt></p><p>选择后按回车键</p><p>如下图所示：<br><img src="/images/1593768387042.png" alt></p><p>#根目录下新建  vue.config.js 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === 'production' ? './' : './',//部署应用包时的基础路径</span><br><span class="line">    outputDir: 'test',//生产环境构建文件的目录</span><br><span class="line">    assetsDir: '',//放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录</span><br><span class="line">    indexPath:'index.html',//指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径</span><br><span class="line">    filenameHashing:true,//生成的静态资源文件名中包含了是否 hash</span><br><span class="line">    transpileDependencies:[],//如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来</span><br><span class="line">    productionSourceMap:false,//是否需要map文件</span><br><span class="line">    css:&#123;</span><br><span class="line">        modules:true,//是否允许css预处理（scss|sass|less|styl）文件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vue3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用swiper实现轮播</title>
      <link href="/vue%E4%BD%BF%E7%94%A8swiper%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD/"/>
      <url>/vue%E4%BD%BF%E7%94%A8swiper%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<p>vue使用swiper实现轮播<br><a id="more"></a><br><a href="http://www.swiper.com.cn/demo/index.html" target="_blank" rel="noopener">swiper官网</a></p><p>#第一步：安装swiper<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save swiper</span><br></pre></td></tr></table></figure></p><p>#第二步：写template<br>案例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span> <span class="attr">v-for</span>=<span class="string">"str in listImg"</span> <span class="attr">:style</span>=<span class="string">"&#123; backgroundImage: 'url(' + str.url + ')' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination swiper-pagination-white swiper-pagination-clickable swiper-pagination-bullets"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"swiper-pagination-bullet"</span> <span class="attr">v-for</span>=<span class="string">"str in listImg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import Swiper from 'swiper'</span><br><span class="line">    import 'swiper/dist/css/swiper.min.css'</span><br><span class="line">    import a from '../assets/benner/yichihei.jpg'</span><br><span class="line">    import b from '../assets/benner/yixihei.jpg'</span><br><span class="line">export default&#123;</span><br><span class="line">mounted() &#123;</span><br><span class="line">var mySwiper = new Swiper('.swiper-container',&#123;</span><br><span class="line">pagination: &#123;//分页器</span><br><span class="line">    el: '.swiper-pagination',</span><br><span class="line">    type: 'bullets',//分页器样式</span><br><span class="line">    clickable :true//是否可以点击</span><br><span class="line">  &#125;,</span><br><span class="line">loop: true,//无限轮播</span><br><span class="line">                speed: 600,//平滑的速度</span><br><span class="line">autoplay:true//自动轮播滑动</span><br><span class="line">&#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       data()&#123;</span><br><span class="line">       return&#123;</span><br><span class="line">       listImg:[</span><br><span class="line">       &#123;url:a&#125;,</span><br><span class="line">       &#123;url:b&#125;,</span><br><span class="line">       &#123;url:a&#125;</span><br><span class="line">       </span><br><span class="line">       ]</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> &gt;</span></span><br><span class="line">.swiper-container &#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 10rem;</span><br><span class="line">margin-top: 44px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.swiper-container .swiper-wrapper &#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.swiper-slide &#123;</span><br><span class="line">background-position: center;</span><br><span class="line">background-size: cover;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.swiper-slide img &#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.swiper-pagination-bullet &#123;</span><br><span class="line">width: 0.833rem;</span><br><span class="line">height: 0.833rem;</span><br><span class="line">display: inline-block;</span><br><span class="line">background: #ff5b06;</span><br><span class="line">opacity:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> swiper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类库网站、插件整理</title>
      <link href="/%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/"/>
      <url>/%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>类库网站、插件整理<br><a id="more"></a><br><a href="http://www.mescroll.com/api.html#methods" target="_blank" rel="noopener">下拉加载</a><br><a href="http://www.iconfont.cn" target="_blank" rel="noopener">icon字体</a><br><a href="http://www.html5plus.org/doc/zh_cn/camera.html" target="_blank" rel="noopener">h5+</a><br><a href="https://blog.csdn.net/lx376693576/article/details/54911340" target="_blank" rel="noopener">vue配置信息</a><br><a href="https://www.cnblogs.com/calamus/p/8242446.html" target="_blank" rel="noopener">vue插件库</a><br><a href="https://wangdahoo.github.io/vonic-documents/#/?id=%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">vue vonic样式API</a><br><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">vue2 样式Api</a><br><a href="https://cnodejs.org/topic/56ef3edd532839c33a99d00e" target="_blank" rel="noopener">前端资源教程</a><br><a href="http://618cj.com/category/vue三级联动/" target="_blank" rel="noopener">vue三级联动</a><br><a href="https://segmentfault.com/a/1190000009506097" target="_blank" rel="noopener">vue完整项目介绍</a><br><a href="https://blog.csdn.net/qq_21423689/article/details/80999830" target="_blank" rel="noopener">前端组件、插件汇总</a><br><a href="http://www.wheelsfactory.cn/#/detail?id=13" target="_blank" rel="noopener">vue拖动插件</a><br><a href="https://segmentfault.com/a/1190000013090341#articleHeader3" target="_blank" rel="noopener">vue-slicksort vue拖动插件 </a><br><a href="https://github.com/jbaysolutions/vue-grid-layout/blob/HEAD/README-zh_CN.md" target="_blank" rel="noopener">vue-grid-layout 栅格布局系统</a> 光环云–大屏项目使用<br><a href="https://segmentfault.com/a/1190000009633257" target="_blank" rel="noopener">handsontable vue表格控件</a><br><a href="https://www.cnblogs.com/starof/p/4968769.html" target="_blank" rel="noopener">动画</a><br><a href="http://www.clipboardjs.cn/" target="_blank" rel="noopener">复制粘贴插件</a><br><a href="https://github.com/yeild/jigsaw" target="_blank" rel="noopener">vue 滑块验证</a><br><a href="https://github.com/boenfu/vuex-along" target="_blank" rel="noopener">vuex 页面刷新状态管理数据保存</a><br><a href="https://garveyzuo.github.io/easyscroll.github.io/#/" target="_blank" rel="noopener">vue滚动条样式优化插件</a><br><a href="https://developer.apple.com/account/ios/device/" target="_blank" rel="noopener">苹果测试平台连接</a><br><a href="https://fir.im/apps/5ab0d06fca87a8615c91b703" target="_blank" rel="noopener">苹果内测平台</a><br><a href="https://www.pgyer.com/udid" target="_blank" rel="noopener"> 获取苹果用户的UDID</a><br><a href="https://lodash.com/" target="_blank" rel="noopener">lodash</a><br><a href="https://www.lodashjs.com/docs/latest" target="_blank" rel="noopener">lodash 中文版</a><br><a href="vue + element表单验证">https://aweiu.com/documents/element-ui-verify</a><br><a href="http://natappfree.cc/" target="_blank" rel="noopener"> 内网穿透</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vue3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中间件</title>
      <link href="/react%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/react%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>react 学习笔记之 中间件<br><a id="more"></a></p><h1 id="Middleware的由来"><a href="#Middleware的由来" class="headerlink" title="Middleware的由来"></a>Middleware的由来</h1><p>在redux中，action仅仅是携带了数据的普通js对象。 action creator 返回的值是这个action类型的对象。然后通过store.dispatch()进行分发。</p><p>同步的情况下一切都很完美，但是reducer无法处理异步的情况。<br>例如：我希望点击一个按钮，2秒之后更新视图，显示消息 “Hi”。<br>那么我们就需要在action 和 reducer之间架起一座桥梁来处理异步。</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react子组件把数据传递父组件</title>
      <link href="/react%E5%AD%90%E7%BB%84%E4%BB%B6%E6%8A%8A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E7%88%B6%E7%BB%84%E4%BB%B6/"/>
      <url>/react%E5%AD%90%E7%BB%84%E4%BB%B6%E6%8A%8A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E7%88%B6%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>react 学习笔记之 子组件把数据传递父组件<br><a id="more"></a></p><p>列：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from 'react';</span><br><span class="line">import PropTypes from 'prop-types'; //传参数据类型检测模块</span><br><span class="line">import './App.css';</span><br><span class="line"></span><br><span class="line">//组件的声明</span><br><span class="line">class Hello extends React.Component &#123;</span><br><span class="line">  constructor() &#123; </span><br><span class="line">    super();</span><br><span class="line">    //初始化state</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      list:['HTML','CSS','JavaScript','Vue','React']</span><br><span class="line">    &#125;;</span><br><span class="line">    //推荐这种修正指针方式。如果不修正指针方法this指向不正确。</span><br><span class="line">    this.addList = this.addList.bind(this);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  addList()&#123;</span><br><span class="line">    //获取input的输入值</span><br><span class="line">    let val = this.refs.addVal.value;</span><br><span class="line">    //更改数组</span><br><span class="line">    this.state.list.push(val);</span><br><span class="line">    //初始化input框的值</span><br><span class="line">    this.refs.addVal.value = '';</span><br><span class="line">    console.log(this.state.list);</span><br><span class="line">    //更新页面数据。如果不执行一下步骤，数据是改变了，但是页面数据没有刷新</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      list:this.state.list</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">ref</span>=<span class="string">'addVal'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addList&#125;</span>&gt;</span>Add List<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.props.sendDataFromChild('这是子组件传递过来的数据')&#125;&#125;&gt;数据从子到父的传递<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          &#123;/*读取state数据 */&#125;</span><br><span class="line">          &#123;</span><br><span class="line">            this.state.list.map((item,i)=&gt;&#123;</span><br><span class="line">              return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//限制传参的数据类型</span><br><span class="line">Hello.propTypes = &#123;</span><br><span class="line">  title: PropTypes.string,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      message:'父组件的数据'</span><br><span class="line">    &#125;</span><br><span class="line">    //修正指针</span><br><span class="line">    this.sendDataFromChild = this.sendDataFromChild.bind(this)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  sendDataFromChild(val)&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      message:val</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"App"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">title</span>=<span class="string">"标题测试"</span> <span class="attr">sendDataFromChild</span>=<span class="string">&#123;this.sendDataFromChild&#125;/</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react组件的声明</title>
      <link href="/react%E7%BB%84%E4%BB%B6%E7%9A%84%E5%A3%B0%E6%98%8E/"/>
      <url>/react%E7%BB%84%E4%BB%B6%E7%9A%84%E5%A3%B0%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>react 学习笔记之 组件的声明<br><a id="more"></a></p><h1 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h1><h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render"></a>ReactDOM.render</h2><ul><li>作用：描画DOM</li><li>参数1：DOM对象</li><li>参数2：注入点</li></ul><p>例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</span><br><span class="line">    document.getElementById('example')</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h1 id="组件的声明"><a href="#组件的声明" class="headerlink" title="组件的声明"></a>组件的声明</h1><h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5:"></a>ES5:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var Hello = React.createClass(&#123;</span><br><span class="line">    render:function()&#123;</span><br><span class="line">        return(</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6:"></a>ES6:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Hello extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react组件属性值的传递</title>
      <link href="/react%E7%BB%84%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E4%BC%A0%E9%80%92/"/>
      <url>/react%E7%BB%84%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>react 学习笔记之 组件属性值的传递<br><a id="more"></a></p><p>#组件接收属性值的传递：</p><p>this.props.属性名</p><p>例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Header</span> <span class="attr">title</span>=<span class="string">"留言"</span> /&gt;</span></span><br><span class="line">var Header = React.createClass(&#123;</span><br><span class="line">    render:function()&#123;</span><br><span class="line">        return <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>如果需要验证接收属性值数据类型需安装 <code>prop-types</code> 模块<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prop-types</span><br></pre></td></tr></table></figure></p><p>然后通过下面的写法对你的某一个组件的道具中的变量进行类型检测：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yourComponent.propTypes = &#123;</span><br><span class="line">    属性1：属性1的变量类型，</span><br><span class="line">    属性2：属性2的变量类型</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检测全部数据类型的变量"><a href="#检测全部数据类型的变量" class="headerlink" title="检测全部数据类型的变量"></a>检测全部数据类型的变量</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Son.propTypes = &#123;</span><br><span class="line">     optionalArray: PropTypes.array,//检测数组类型</span><br><span class="line">     optionalBool: PropTypes.bool,//检测布尔类型</span><br><span class="line">     optionalFunc: PropTypes.func,//检测函数（Function类型）</span><br><span class="line">     optionalNumber: PropTypes.number,//检测数字</span><br><span class="line">     optionalObject: PropTypes.object,//检测对象</span><br><span class="line">     optionalString: PropTypes.string,//检测字符串</span><br><span class="line">     optionalSymbol: PropTypes.symbol,//ES6新增的symbol类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react状态的改变</title>
      <link href="/react%E7%8A%B6%E6%80%81%E7%9A%84%E6%94%B9%E5%8F%98/"/>
      <url>/react%E7%8A%B6%E6%80%81%E7%9A%84%E6%94%B9%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<p>react 学习笔记之 状态的改变<br><a id="more"></a></p><p><strong> getInitlState:定义初始状态（ES6中已不再使用，改成在constructor中设定）</strong><br><strong> this.state: 读取状态 </strong><br><strong> this.setState:更新组件的状态 </strong></p><h2 id="知识点补充："><a href="#知识点补充：" class="headerlink" title="知识点补充："></a>知识点补充：</h2><p><strong> constructor </strong>是ES6中一种用于创建和初始化class创建的对象的特殊方法<br>使用 <strong> constructor </strong> 方法：<br>例1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Square extends Polygon &#123;</span><br><span class="line">    constructor(length) &#123;</span><br><span class="line">        // 在这里, 它调用了父类的构造函数, 并将 lengths 提供给 Polygon 的"width"和"height"</span><br><span class="line">        super(length, length);</span><br><span class="line">        // 注意: 在派生类中, 必须先调用 super() 才能使用 "this"。</span><br><span class="line">        // 忽略这个，将会导致一个引用错误。</span><br><span class="line">        this.name = 'Square';</span><br><span class="line">    &#125;</span><br><span class="line">    get area() &#123;</span><br><span class="line">        return this.height * this.width;</span><br><span class="line">    &#125;</span><br><span class="line">    set area(value) &#123;</span><br><span class="line">        // 注意：不可使用 this.area = value</span><br><span class="line">        // 否则会导致循环call setter方法导致爆栈</span><br><span class="line">        this._area = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Polygon &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.name = "Polygon";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Square extends Polygon &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Rectangle &#123;&#125;</span><br><span class="line"></span><br><span class="line">Object.setPrototypeOf(Square.prototype, Rectangle.prototype);</span><br><span class="line"></span><br><span class="line">console.log(Object.getPrototypeOf(Square.prototype) === Polygon.prototype); //false</span><br><span class="line">console.log(Object.getPrototypeOf(Square.prototype) === Rectangle.prototype); //true</span><br><span class="line"></span><br><span class="line">let newInstance = new Square();</span><br><span class="line">console.log(newInstance.name); //Polygon</span><br></pre></td></tr></table></figure><p>如前所述，如果不指定构造方法，则使用默认构造函数。对于基类，默认构造函数是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor() &#123;&#125;</span><br></pre></td></tr></table></figure><p>对于派生类，默认构造函数是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">constructor(...args) &#123;</span><br><span class="line">  super(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> super() </strong> s说明：执行父类的构造器</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack配置多环境build</title>
      <link href="/Webpack%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83build/"/>
      <url>/Webpack%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83build/</url>
      
        <content type="html"><![CDATA[<p>用vue cli2.0 脚手架搭建的项目，脚手架默认生成 <code>dev.env.js</code>，<code>prod.env.js</code> 两个环境变量声明文件，build时默认使用 <code>prod.env.js</code> ，这不便于我们分别 build 测试环境和 生产环境代码<br><a id="more"></a></p><p>目前我们的前端项目中使用到Webpack的前提下，在 config 目录下可以看到有 dev.env.js，prod.env.js 两个环境变量声明文件，build时默认使用 prod.env.js ，这不便于我们分别 build 测试环境和 生产环境代码<br>这个声明文件内容大致如下</p><h6 id="dev-env-js"><a href="#dev-env-js" class="headerlink" title="dev.env.js"></a>dev.env.js</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">'use strict'</span><br><span class="line">const merge = require('webpack-merge')</span><br><span class="line">const prodEnv = require('./prod.env')</span><br><span class="line"> </span><br><span class="line">module.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: '"development"',</span><br><span class="line">  LOGOUT_URL: '"http://sso.example.org:9999/logout"'</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在其中声明的变量可以在我们的代码中通过 process.env.LOGOUT_URL 来引用：<br>form.action = process.env.LOGOUT_URL<br>在 build 阶段使用哪个 xxx.env.js 的声明即决定了最终build输出内容中变量的值。<br>在此我只做抛砖引玉，通过简单的扩展，添加一个自定义的 xxx.env.js 文件，并通过build命令传参来控制使用哪个文件。</p><p>比如我们就缺少一个test环境的配置，具体步骤如下：</p><h6 id="1、创建-config-test-env-js"><a href="#1、创建-config-test-env-js" class="headerlink" title="1、创建 config/test.env.js"></a>1、创建 config/test.env.js</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">'use strict'</span><br><span class="line">module.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: '"test"',</span><br><span class="line">  BASE_API: '"/"',</span><br><span class="line">  LOGOUT_URL: '"http://172.16.0.95/logout"'</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="2、创建-process-argv-js"><a href="#2、创建-process-argv-js" class="headerlink" title="2、创建 process-argv.js"></a>2、创建 process-argv.js</h6><p>在 build 目录创建 process-argv.js，内容如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const processArgv = process.argv.splice(2)</span><br><span class="line">module.exports = processArgv</span><br></pre></td></tr></table></figure></p><p>process.argv 用于读取node xxx.js –yyy 命令的传参，比如 –yyy 即参数。但只有第一次使用会得到，再次使用则获取不到，所以单独用一个文件来存储后可多次调用。</p><h6 id="3、编辑-build-build-js"><a href="#3、编辑-build-build-js" class="headerlink" title="3、编辑 build/build.js"></a>3、编辑 build/build.js</h6><p>将 <code>const spinner = ora(&#39;building for production...&#39;)</code>这行改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const processArgv = require('./process-argv')</span><br><span class="line">if (processArgv.indexOf('--test') &gt;= 0) &#123;</span><br><span class="line">  process.env.NODE_ENV = 'test'</span><br><span class="line">&#125;</span><br><span class="line">const spinner = ora(`building for $&#123;process.env.NODE_ENV&#125;...`)</span><br></pre></td></tr></table></figure><h6 id="4、编辑-build-webpack-prod-conf-js"><a href="#4、编辑-build-webpack-prod-conf-js" class="headerlink" title="4、编辑 build/webpack.prod.conf.js"></a>4、编辑 build/webpack.prod.conf.js</h6><p>将 <code>const env = require(&#39;../config/prod.env&#39;)</code> 这行改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let envName = 'prod'</span><br><span class="line">const processArgv = require('./process-argv')</span><br><span class="line">if (processArgv.indexOf('--test') &gt;= 0) &#123;</span><br><span class="line">  envName = 'test'</span><br><span class="line">&#125;</span><br><span class="line">console.log(`building $&#123;envName&#125;`)</span><br><span class="line">const env = require(`../config/$&#123;envName&#125;.env`)</span><br></pre></td></tr></table></figure><h6 id="5、package-json-增加命令"><a href="#5、package-json-增加命令" class="headerlink" title="5、package.json 增加命令"></a>5、package.json 增加命令</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "test-build": "node build/build.js --test",</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>即执行 node build/build.js –test，代表 –test 参数指定了使用 build/test.env.js 作为环境变量声明。<br>不指定时，则默认仍然是prod。</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.0搭建项目</title>
      <link href="/vue-cli%202.0%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/vue-cli%202.0%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>vue2.0搭建项目说明<br><a id="more"></a><br><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue官网链接</a><br><a href="https://www.cnblogs.com/binmengxue/p/6831850.html" target="_blank" rel="noopener">Vue安装教程链接</a></p><p>目前vue 已经有了vue 3.0版本了 如需使用vue 2.0旧版本 执行以下命令：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init //获取vue 2.0旧版本</span><br></pre></td></tr></table></figure></p><h1 id="全局安装-vue-cli"><a href="#全局安装-vue-cli" class="headerlink" title="全局安装 vue-cli"></a>全局安装 vue-cli</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue  //最新稳定版</span><br><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure><h1 id="创建一个基于-webpack-模板的新项目"><a href="#创建一个基于-webpack-模板的新项目" class="headerlink" title="创建一个基于 webpack 模板的新项目"></a>创建一个基于 webpack 模板的新项目</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br><span class="line"> Project name  //项目名称</span><br><span class="line"> Project description  //项目描述</span><br><span class="line"> Author //作者</span><br><span class="line"> Vue build  //vue的建立</span><br><span class="line"> Install vue-router?   //安装vue路由</span><br><span class="line"> Use ESLint to lint your code？  //该选项为使用ESLint规范你的代码，一个空格错误都将报错，不开启，避免不必要的麻烦</span><br><span class="line"> Set up unit tests？  //设置单元测试</span><br><span class="line"> Setup e2e tests with Nightwatch   // Nightwatch建立端到端的测试</span><br><span class="line"> Should we run `npm install` for you after the project has been created? (recommended) (Use arrow keys)  //确认创建项目</span><br></pre></td></tr></table></figure><p>如下图：<br><img src="/images/image1.png" alt></p><h1 id="安装依赖，走你"><a href="#安装依赖，走你" class="headerlink" title="安装依赖，走你"></a>安装依赖，走你</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd my-project  //跳转至my-project文件路径下</span><br><span class="line">npm install   //初始化webpack模块</span><br><span class="line">npm run dev   //启动服务器</span><br><span class="line">npm install vue-router vue-resource --save  //安装路由模块</span><br></pre></td></tr></table></figure><p>如下图：<br><img src="/images/image2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp添加版本功能笔记</title>
      <link href="/gulp%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E5%8A%9F%E8%83%BD%E7%AC%94%E8%AE%B0/"/>
      <url>/gulp%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E5%8A%9F%E8%83%BD%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>使用Gulp添加版本功能笔记<br><a id="more"></a></p><h1 id="安装gulp和gulp插件"><a href="#安装gulp和gulp插件" class="headerlink" title="安装gulp和gulp插件"></a>安装gulp和gulp插件</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br><span class="line">npm install --save-dev gulp-rev</span><br><span class="line">npm install --save-dev gulp-rev-collector</span><br><span class="line">npm install --save-dev gulp-asset-rev</span><br><span class="line">npm install --save-dev run-sequence</span><br></pre></td></tr></table></figure><h1 id="编写gulpfile-js"><a href="#编写gulpfile-js" class="headerlink" title="编写gulpfile.js"></a>编写gulpfile.js</h1><p> 此文件包含编译less，压缩、重命名css和js，同时可以压缩html并自动添加版本号的gulp.js配置文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">//引入gulp和gulp插件</span><br><span class="line">var gulp = require('gulp'),</span><br><span class="line">  less = require('gulp-less'),</span><br><span class="line">  assetRev = require('gulp-asset-rev'),</span><br><span class="line">  minifyCss = require('gulp-minify-css'),</span><br><span class="line">  uglify = require('gulp-uglify'),</span><br><span class="line">  htmlmin = require('gulp-htmlmin'),</span><br><span class="line">  rename = require('gulp-rename'),</span><br><span class="line">  imagemin = require('gulp-imagemin'),</span><br><span class="line">  runSequence = require('run-sequence'),</span><br><span class="line">  rev = require('gulp-rev'),</span><br><span class="line">  revCollector = require('gulp-rev-collector');</span><br><span class="line"> </span><br><span class="line">//定义css、js源文件路径</span><br><span class="line">var cssSrc = 'css/*.css',</span><br><span class="line">  cssMinSrc = 'dist/css/*.css',</span><br><span class="line">  jsSrc = 'js/*.js',</span><br><span class="line">  jsMinSrc = 'dist/js/*.js',</span><br><span class="line">  lessSrc = 'less/*.less',</span><br><span class="line">  imgMinSrc = 'dist/images/*.&#123;png,jpg,gif,ico&#125;',</span><br><span class="line">  htmlSrc = '*.html';</span><br><span class="line"> </span><br><span class="line">//编译less 定义一个less任务（自定义任务名称）</span><br><span class="line">gulp.task('less', function()&#123;</span><br><span class="line">  return gulp.src(lessSrc)  //该任务针对的文件</span><br><span class="line">   .pipe(less()) //该任务调用的模块</span><br><span class="line">   .pipe(gulp.dest('css'));//编译后的路径</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//为css中引入的图片/字体等添加hash编码</span><br><span class="line">gulp.task('assetRev', function()&#123;</span><br><span class="line">  return gulp.src(cssSrc)  //该任务针对的文件</span><br><span class="line">   .pipe(assetRev()) //该任务调用的模块</span><br><span class="line">   .pipe(gulp.dest('src')); //编译后的路径</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//压缩css</span><br><span class="line">gulp.task('cssMin', function() &#123;</span><br><span class="line">  return gulp.src(cssSrc)   //压缩的文件</span><br><span class="line">    .pipe(rename(&#123;suffix: '.min'&#125;))  </span><br><span class="line">    .pipe(minifyCss()) //执行压缩</span><br><span class="line">    .pipe(gulp.dest('dist/css'));  //输出文件夹</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//CSS生成文件hash编码并生成 rev-manifest.json文件名对照映射</span><br><span class="line">gulp.task('revCss', function()&#123;</span><br><span class="line">  return gulp.src(cssMinSrc)</span><br><span class="line">    .pipe(rev()) //文件名加MD5后缀</span><br><span class="line">    .pipe(rev.manifest())  //必须有这个方法 生成一个rev-manifest.json</span><br><span class="line">    .pipe(gulp.dest('dist/css'));  //将rev-manifest.json 保存到 dist/css 目录内</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//压缩js</span><br><span class="line">gulp.task('uglify',function()&#123;</span><br><span class="line">  return gulp.src(jsSrc)</span><br><span class="line">   .pipe(rename(&#123;suffix: '.min'&#125;))</span><br><span class="line">   .pipe(uglify())</span><br><span class="line">   .pipe(gulp.dest('dist/js'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//js生成文件hash编码并生成 rev-manifest.json文件名对照映射</span><br><span class="line">gulp.task('revJs', function()&#123;</span><br><span class="line">  return gulp.src(jsMinSrc)</span><br><span class="line">    .pipe(rev())</span><br><span class="line">    .pipe(rev.manifest())</span><br><span class="line">    .pipe(gulp.dest('dist/js'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//压缩html</span><br><span class="line">gulp.task('htmlMin',function()&#123;</span><br><span class="line">  var options = &#123;</span><br><span class="line">    collapseWhitespace:true,  //从字面意思应该可以看出来，清除空格，压缩html，这一条比较重要，作用比较大，引起的改变压缩量也特别大。</span><br><span class="line">    collapseBooleanAttributes:true,  //省略布尔属性的值，比如：<span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>,那么设置这个属性后，就会变成 <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>/&gt;</span>。</span><br><span class="line">    removeComments:true,  //清除html中注释的部分，我们应该减少html页面中的注释。</span><br><span class="line">    removeEmptyAttributes:true,  //清除所有的空属性。</span><br><span class="line">    removeScriptTypeAttributes:true,  //清除所有script标签中的type="text/javascript"属性。</span><br><span class="line">    removeStyleLinkTypeAttributes:true,  //清楚所有Link标签上的type属性。</span><br><span class="line">    minifyJS:true,  //压缩html中的javascript代码。</span><br><span class="line">    minifyCSS:true  //压缩html中的css代码。</span><br><span class="line">  &#125;;</span><br><span class="line">  return gulp.src(htmlSrc)</span><br><span class="line">   .pipe(htmlmin(options))</span><br><span class="line">   .pipe(gulp.dest('dist/html'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//Html替换css、js文件版本</span><br><span class="line">gulp.task('revHtml', function () &#123;</span><br><span class="line">  return gulp.src(['dist/**/*.json', 'dist/html/*.html'])</span><br><span class="line">    .pipe(revCollector())</span><br><span class="line">    .pipe(gulp.dest('dist/html'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//压缩image</span><br><span class="line">gulp.task('imageMin', function () &#123;</span><br><span class="line">  gulp.src('images/*.&#123;png,jpg,gif,ico&#125;')</span><br><span class="line">    .pipe(imagemin())</span><br><span class="line">    .pipe(gulp.dest('dist/images'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task('revImage', function()&#123;</span><br><span class="line">  return gulp.src(imgMinSrc)</span><br><span class="line">    .pipe(rev())</span><br><span class="line">    .pipe(rev.manifest())  //必须有这个方法</span><br><span class="line">    .pipe(gulp.dest('dist/images'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task('default', function (done) &#123;</span><br><span class="line">  //condition = false;</span><br><span class="line">  runSequence(  //此处不能用gulp.run这个最大限度并行(异步)执行的方法，要用到runSequence这个串行方法(顺序执行)才可以在运行gulp后顺序执行这些任务并在html中加入版本号</span><br><span class="line">    'less',</span><br><span class="line">    'assetRev',</span><br><span class="line">    'cssMin',</span><br><span class="line">    'revCss',</span><br><span class="line">    'uglify',</span><br><span class="line">    'revJs',</span><br><span class="line">    'imageMin',</span><br><span class="line">    'revImage',</span><br><span class="line">    'htmlMin', </span><br><span class="line">    'revHtml',    </span><br><span class="line">    done);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>更改gulp-rev和gulp-rev-collector<br>    打开node_modules\gulp-rev\index.js<br>    第144行 manifest[originalFile] = revisionedFile;<br>    更新为: manifest[originalFile] = originalFile + ‘?v=’ + file.revHash;<br>打开nodemodules\gulp-rev\nodemodules\rev-path\index.js<br>    10行 return filename + ‘-‘ + hash + ext;<br>    更新为: return filename + ext;<br>打开node_modules\gulp-rev-collector\index.js<br>    31行 if ( !<em>.isString(json[key]) || path.basename(json[key]).replace(new RegExp( opts.revSuffix ), ‘’ ) !==  path.basename(key) ) {<br>    更新为: if ( !</em>.isString(json[key]) || path.basename(json[key]).split(‘?’)[0] !== path.basename(key) ) {<br>打开node_modules\gulp-assets-rev\index.js<br>    78行 var verStr = (options.verConnecter || “-“) + md5;<br>    更新为：var verStr = (options.verConnecter || “”) + md5;<br>    80行 src = src.replace(verStr, ‘’).replace(/(.[^.]+)$/, verStr + “$1”);<br>    更新为：src=src+”?v=”+verStr;</p><h1 id="继续更改gulp-rev-collector"><a href="#继续更改gulp-rev-collector" class="headerlink" title="继续更改gulp-rev-collector"></a>继续更改gulp-rev-collector</h1><p>打开node_modules\gulp-rev-collector\index.js<br>    第107行 regexp: new RegExp( ‘([\/\\\’”])’ + pattern, ‘g’ ),<br>    更新为: regexp: new RegExp( ‘([\/\\\’”])’ + pattern+’(\?v=\w{10})?’, ‘g’ ),</p>]]></content>
      
      
      <categories>
          
          <category> 打包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glup学习笔记</title>
      <link href="/Glup%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/Glup%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>使用Gulp打包压缩Html、Css、Js<br><a id="more"></a></p><ol><li>node.js 安装</li><li>淘宝镜像的安装：<code>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></code></li><li>全局安装gulp:<code>cnpm install –global gulp</code></li><li>项目安装gulp:<code>cnpm install –save-dev gulp</code></li><li>初始化一个package.json文件：<code>gulp init</code></li><li>然后执行:<code>cnpm install gulp –save-dev</code></li><li>项目安装gulp插件如编译less文件:<code>cnpm install –save-dev  gulp-less （less编译）</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev  gulp-sass（sass编译）</span><br><span class="line">cnpm install --save-dev gulp-uglify （JS压缩）</span><br><span class="line">cnpm install --save-dev gulp-minify-html（html压缩）</span><br><span class="line">cnpm install --save-dev gulp-concat （js文件合并）</span><br><span class="line">cnpm install –-save-dev  gulp-imagemin （图片压缩）</span><br><span class="line">cnpm install --save-dev gulp-babel  (es6语法)</span><br><span class="line">npm install --save-dev gulp-babel babel-preset-env (es6语法)</span><br><span class="line">cnpm install --save-dev babel-preset-es2015  (es6转换es5)</span><br><span class="line">cnpm install --save-dev gulp-connect  (自动刷新)</span><br></pre></td></tr></table></figure></li></ol><p>删除安装的外挂：</p><p>首先在全局安装<code>npm i -g rimraf</code>；<br>然后转到你的根目录输入  <code>rimraf -rf node_modules/package</code>(package 依旧是外挂名字  比如  <code>gulp-less</code>);</p>]]></content>
      
      
      <categories>
          
          <category> 打包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法学习笔记</title>
      <link href="/MarkDown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/MarkDown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>关于Markdown的使用手册</p><a id="more"></a><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><ol><li><p>用#标记</p><blockquote><p>在 标题开头 加上1~6个#，依次代表一级标题、二级标题….六级标题<br>#一级标题</p><blockquote><p>##二级标题<br>###三级标题<br>#####四级标题<br>######五级标题<br>######六级标题</p></blockquote></blockquote></li><li><p>用=和-标记</p><blockquote><p>在 标题底下 加上任意个=代表一级标题，-代表二级标题</p><blockquote><p>This is an H1 =============<br>This is an H2 ————-</p></blockquote></blockquote></li></ol><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>1.无序列表：在文字前加上 *、-或+即可变成无序列表</p><blockquote><ul><li>*red</li></ul><ul><li>+blue</li></ul><ul><li>-green</li></ul></blockquote><p>2.有序列表：在文字前加上1.2.3.即可变成有序列表</p><blockquote><ol><li>red</li><li>blue</li><li>green</li></ol></blockquote><blockquote><p>注：符号和文字之间加上一个字符的空格</p></blockquote><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</p><blockquote><p>这是一段引用    //在<code>&gt;</code>后面有 1 个空格</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre><p>代码例子：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>在一行中用三个以上的*、-、_来建立一个分隔线</p><hr><hr><hr><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>两个<em>或_代表加粗，一个</em>或-代表斜体，~~代表删除</p><p><strong>加粗文本</strong> 或者 <strong>加粗</strong><br><em>斜体</em> 或者 _斜体_<br><del>删除</del><br>注：前后都需要添加</p><p>#图片与链接</p><p>图片为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure></p><ul><li>Alt text 为如果图片无法显示时显示的文字</li><li>/path/to/img.jpg 为图片所在路径 路径可以使用绝对路径也可以使用相对路径，建议使用绝对路径</li><li>Optional title 显示标题。显示效果为在你将鼠标放到图片上后，会显示一个小框提示，提示内容就是Option title 里的内容</li><li><p>迁入HTML代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img scr=&quot;./xxx.png&quot; width = &quot;300&quot; height = &quot;200&quot; alt = &quot;图片名称&quot; align = center /&gt;</span><br><span class="line"></span><br><span class="line">*&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">&lt;img/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>链接为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]()</span><br></pre></td></tr></table></figure></li></ul><h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github搭建博客笔记</title>
      <link href="/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
      <url>/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>基于Hexo和github搭建的个人博客，安装过程及问题在此做的不定期整理，并会随时上传至github平台<br><a id="more"></a></p><p>#安装Node<br><a href="http://nodejs.cn/" target="_blank" rel="noopener">node官网下载</a></p><ol><li>根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧。如图：<br><img src="http://ww3.sinaimg.cn/large/9fe4afa0gw1faljhotcr1j20dv0atq4u.jpg" alt="node安装"></li><li>保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口。如图：<br><img src="http://ww3.sinaimg.cn/large/9fe4afa0gw1faljikc6nbj20bh06l3z7.jpg" alt="node安装"></li><li>在新打开的窗口中输入cmd，敲击回车，打开命令行界面。（下文将直接用打开命令行来表示以上操作，记住哦~） 在打开的命令行界面中，输入：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ol><p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。<br><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1faljiuibwdj20it0cb3zd.jpg" alt="node安装"></p><p>#安装Git<br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网下载</a></p><ul><li>和Node.js一样，设置都只需要保持默认</li><li>打开命令行，输入<code>git –version</code>检查是否安装正确,如图：<br><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faljp87tpkj20it0cbdgo.jpg" alt="Git安装检查"></li></ul><h1 id="github账户的注册和配置"><a href="#github账户的注册和配置" class="headerlink" title="github账户的注册和配置"></a>github账户的注册和配置</h1><ol><li>登录进github <a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a></li><li>创建代码库<br>登陆之后，点击页面右上角的加号，选择New repository 如图：<br><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faljww56v8j20ci0a975c.jpg" alt="创建代码库"><br>进入代码库创建页面：<br>在Repository name下填写 yourname.github.io 如图：<br><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1faljv7hoqhj20p40fz0vo.jpg" alt="创建代码库"><br><strong> 注意：比如我的github名称是qq785478075 ,这里你就填 qq785478075.github.io,如果你的名字是xujun，那你就填 xujun.github.io </strong></li></ol><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><strong> 安装Hexo——确保电脑已经安装Node.js以及Git环境 </strong><br><strong> 命令行在git bash下输入 </strong></p><ol><li><p>命令行输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli #全局安装</span><br><span class="line">$ npm install hexo --save</span><br></pre></td></tr></table></figure></li><li><p>查看是否安装成功</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure></li><li><p>Hexo相关配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init #初始化hexo</span><br><span class="line">$ npm install #安装所需要的组件(生成器)</span><br><span class="line">$ hexo s #运行</span><br></pre></td></tr></table></figure></li></ol><h1 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h1><ol><li><p>配置身份信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config -- golbal user.name "yourname"</span><br><span class="line">$ git config -- golbal user.email "youremail"</span><br><span class="line">$ ssh-keygen -t rsa -C "youremail" #生成密钥，密钥位置会给出提示 id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>配置身份信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">branch；master</span><br><span class="line">注：这里的repo中填写的是SSH-Key</span><br></pre></td></tr></table></figure></li><li><p>连接代码库<br>登录Github，点击头像下的settings，添加ssh</p><p>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去</p><p>输入 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</p></li><li><p>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save </p></li><li><p>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了    </p><blockquote><p>假如ssh-key配置失败，那么只要以下步骤就能完全解决<br>首先，清除所有的key-pair<br>ssh-add -D<br>rm -r ~/.ssh<br>删除你在github中的public-key<br>重新生成ssh密钥对<br>ssh-keygen -t rsa -C “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“</p></blockquote></li></ol><h1 id="备份分支源文件"><a href="#备份分支源文件" class="headerlink" title="备份分支源文件"></a>备份分支源文件</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//git 文件添加</span><br><span class="line">git add .</span><br><span class="line">//git 提交</span><br><span class="line">git commit -m "init"</span><br><span class="line">//push到hexo分支</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
