<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo 多台电脑配置</title>
      <link href="/Hexo%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE/"/>
      <url>/Hexo%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Hexo 多台电脑配置<br><a id="more"></a></p><p>在之前的一篇文章中描述了<a href="/Hexo-github搭建博客笔记/#more"><font color="red">Hexo 加 github搭建</font></a>怎么从零开始搭建、备份<font font-size="12px" color="blue">个人博客</font>的文章</p><p>今天说一下多台电脑同时配置 hexo</p><p>首先确保自己已经使用hexo在github搭建好了自己的个人博客。<br><img src="/images/2020-07-03_162103.png" alt></p><p>对username.github.io仓库 hexo分支拉取到本地;<br>命令如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/*****/****.github.io.git</span><br></pre></td></tr></table></figure></p><p>此时从github 拉取的代码为 master主分支 这是我们需要切换分支，命令如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git chckout hexo</span><br><span class="line">//hexo 为切换分支的名称</span><br></pre></td></tr></table></figure></p><p>此时本地会有一个新的hexo项目，但是由于.gitignore文件中过滤了node_modules\，所以克隆下来的目录里没有node_modules\，这是hexo所需要的组件，所以要在该目录中重新安装hexo，但不需要hexo init。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install hexo --save</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>####新建一篇文章测试<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s //本地服务</span><br></pre></td></tr></table></figure></p><p>####推送到hexo分支<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "add work PC test"</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></p><p>####部署到master分支<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p>####日常操作<br>如果上面的过程都操作无误的话，你就可以在任何能联网的电脑上写博客啦。一般写博客的流程是下面这样。</p><p>####写博客前<br>不管你本地的仓库是否是最新的，都先pull一下，以防万一：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin hexo</span><br></pre></td></tr></table></figure></p><p>写博客<br>hexo new “title”<br>然后打开source/_posts/title.md，撰写博文。</p><p>写完博客<br>先推送到hexo分支上：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "add work PC test"</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></p><p>最后部署到master分支上<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p>整个流程大概就是这样。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 错误记录</title>
      <link href="/hexo%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
      <url>/hexo%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p> Hexo 错误记录<br><a id="more"></a></p><p>大致错误如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The "mode" argument must be integer. Receivedan instance of Object</span><br></pre></td></tr></table></figure></p><p><img src="/images/1593746937.jpg" alt></p><p>在百度多次搜索、验证，验证找到错误原因为node.js版本太高导致，但是自己又不想卸载原本的nodejs版本，所以在网上找了个叫 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener"><font color="red">nvm</font></a> 的工具降低 node的版本；接下来就可以 <font color="red">hexo g -d</font>  完美解决此次错误</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: ERROR: The key you are authenticating with has been marked as read only.</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><p><img src="/images/1593748047(1" alt>.jpg)<br><img src="/images/2020-07-03_132647.png" alt></p><p>在配置ssh key文件时勾选上<font color="red">Allow write access</font> 选项</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli 3.0</title>
      <link href="/vue-cli%203.0%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/vue-cli%203.0%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>vue-cli 3.0搭建项目<br><a id="more"></a></p><p>#安装全局快速原型设计<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure></p><p>#使用以下命令来创建新项目<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br><img src="/images/1593768388483.png" alt></p><p>这个默认的设置非常适合快速创建一个新项目的原型，而手动设置则提供了更多的选项，它们是面向生产的项目更加需要的。</p><p>如下图所示：<br><img src="/images/1593768385539.png" alt></p><p>选择后按回车键</p><p>如下图所示：<br><img src="/images/1593768387042.png" alt></p><p>#根目录下新建  vue.config.js 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === 'production' ? './' : './',//部署应用包时的基础路径</span><br><span class="line">    outputDir: 'test',//生产环境构建文件的目录</span><br><span class="line">    assetsDir: '',//放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录</span><br><span class="line">    indexPath:'index.html',//指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径</span><br><span class="line">    filenameHashing:true,//生成的静态资源文件名中包含了是否 hash</span><br><span class="line">    transpileDependencies:[],//如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来</span><br><span class="line">    productionSourceMap:false,//是否需要map文件</span><br><span class="line">    css:&#123;</span><br><span class="line">        modules:true,//是否允许css预处理（scss|sass|less|styl）文件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vue3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用swiper实现轮播</title>
      <link href="/vue%E4%BD%BF%E7%94%A8swiper%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD/"/>
      <url>/vue%E4%BD%BF%E7%94%A8swiper%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<p>vue使用swiper实现轮播<br><a id="more"></a><br><a href="http://www.swiper.com.cn/demo/index.html" target="_blank" rel="noopener">swiper官网</a></p><p>#第一步：安装swiper<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save swiper</span><br></pre></td></tr></table></figure></p><p>#第二步：写template<br>案例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span> <span class="attr">v-for</span>=<span class="string">"str in listImg"</span> <span class="attr">:style</span>=<span class="string">"&#123; backgroundImage: 'url(' + str.url + ')' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination swiper-pagination-white swiper-pagination-clickable swiper-pagination-bullets"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"swiper-pagination-bullet"</span> <span class="attr">v-for</span>=<span class="string">"str in listImg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import Swiper from 'swiper'</span><br><span class="line">    import 'swiper/dist/css/swiper.min.css'</span><br><span class="line">    import a from '../assets/benner/yichihei.jpg'</span><br><span class="line">    import b from '../assets/benner/yixihei.jpg'</span><br><span class="line">export default&#123;</span><br><span class="line">mounted() &#123;</span><br><span class="line">var mySwiper = new Swiper('.swiper-container',&#123;</span><br><span class="line">pagination: &#123;//分页器</span><br><span class="line">    el: '.swiper-pagination',</span><br><span class="line">    type: 'bullets',//分页器样式</span><br><span class="line">    clickable :true//是否可以点击</span><br><span class="line">  &#125;,</span><br><span class="line">loop: true,//无限轮播</span><br><span class="line">                speed: 600,//平滑的速度</span><br><span class="line">autoplay:true//自动轮播滑动</span><br><span class="line">&#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       data()&#123;</span><br><span class="line">       return&#123;</span><br><span class="line">       listImg:[</span><br><span class="line">       &#123;url:a&#125;,</span><br><span class="line">       &#123;url:b&#125;,</span><br><span class="line">       &#123;url:a&#125;</span><br><span class="line">       </span><br><span class="line">       ]</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> &gt;</span></span><br><span class="line">.swiper-container &#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 10rem;</span><br><span class="line">margin-top: 44px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.swiper-container .swiper-wrapper &#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.swiper-slide &#123;</span><br><span class="line">background-position: center;</span><br><span class="line">background-size: cover;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.swiper-slide img &#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.swiper-pagination-bullet &#123;</span><br><span class="line">width: 0.833rem;</span><br><span class="line">height: 0.833rem;</span><br><span class="line">display: inline-block;</span><br><span class="line">background: #ff5b06;</span><br><span class="line">opacity:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> swiper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类库网站、插件整理</title>
      <link href="/%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/"/>
      <url>/%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>类库网站、插件整理<br><a id="more"></a><br><a href="http://www.mescroll.com/api.html#methods" target="_blank" rel="noopener">下拉加载</a><br><a href="http://www.iconfont.cn" target="_blank" rel="noopener">icon字体</a><br><a href="http://www.html5plus.org/doc/zh_cn/camera.html" target="_blank" rel="noopener">h5+</a><br><a href="https://blog.csdn.net/lx376693576/article/details/54911340" target="_blank" rel="noopener">vue配置信息</a><br><a href="https://www.cnblogs.com/calamus/p/8242446.html" target="_blank" rel="noopener">vue插件库</a><br><a href="https://wangdahoo.github.io/vonic-documents/#/?id=%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">vue vonic样式API</a><br><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">vue2 样式Api</a><br><a href="https://cnodejs.org/topic/56ef3edd532839c33a99d00e" target="_blank" rel="noopener">前端资源教程</a><br><a href="http://618cj.com/category/vue三级联动/" target="_blank" rel="noopener">vue三级联动</a><br><a href="https://segmentfault.com/a/1190000009506097" target="_blank" rel="noopener">vue完整项目介绍</a><br><a href="https://blog.csdn.net/qq_21423689/article/details/80999830" target="_blank" rel="noopener">前端组件、插件汇总</a><br><a href="http://www.wheelsfactory.cn/#/detail?id=13" target="_blank" rel="noopener">vue拖动插件</a><br><a href="https://segmentfault.com/a/1190000013090341#articleHeader3" target="_blank" rel="noopener">vue-slicksort vue拖动插件 </a><br><a href="https://github.com/jbaysolutions/vue-grid-layout/blob/HEAD/README-zh_CN.md" target="_blank" rel="noopener">vue-grid-layout 栅格布局系统</a> 光环云–大屏项目使用<br><a href="https://segmentfault.com/a/1190000009633257" target="_blank" rel="noopener">handsontable vue表格控件</a><br><a href="https://www.cnblogs.com/starof/p/4968769.html" target="_blank" rel="noopener">动画</a><br><a href="http://www.clipboardjs.cn/" target="_blank" rel="noopener">复制粘贴插件</a><br><a href="https://github.com/yeild/jigsaw" target="_blank" rel="noopener">vue 滑块验证</a><br><a href="https://github.com/boenfu/vuex-along" target="_blank" rel="noopener">vuex 页面刷新状态管理数据保存</a><br><a href="https://garveyzuo.github.io/easyscroll.github.io/#/" target="_blank" rel="noopener">vue滚动条样式优化插件</a><br><a href="https://developer.apple.com/account/ios/device/" target="_blank" rel="noopener">苹果测试平台连接</a><br><a href="https://fir.im/apps/5ab0d06fca87a8615c91b703" target="_blank" rel="noopener">苹果内测平台</a><br><a href="https://www.pgyer.com/udid" target="_blank" rel="noopener"> 获取苹果用户的UDID</a><br><a href="https://lodash.com/" target="_blank" rel="noopener">lodash</a><br><a href="https://www.lodashjs.com/docs/latest" target="_blank" rel="noopener">lodash 中文版</a><br><a href="vue + element表单验证">https://aweiu.com/documents/element-ui-verify</a><br><a href="http://natappfree.cc/" target="_blank" rel="noopener"> 内网穿透</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vue3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.0搭建项目</title>
      <link href="/vue-cli%202.0%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/vue-cli%202.0%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>vue2.0搭建项目说明<br><a id="more"></a><br><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue官网链接</a><br><a href="https://www.cnblogs.com/binmengxue/p/6831850.html" target="_blank" rel="noopener">Vue安装教程链接</a></p><p>目前vue 已经有了vue 3.0版本了 如需使用vue 2.0旧版本 执行以下命令：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init //获取vue 2.0旧版本</span><br></pre></td></tr></table></figure></p><h1 id="全局安装-vue-cli"><a href="#全局安装-vue-cli" class="headerlink" title="全局安装 vue-cli"></a>全局安装 vue-cli</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue  //最新稳定版</span><br><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure><h1 id="创建一个基于-webpack-模板的新项目"><a href="#创建一个基于-webpack-模板的新项目" class="headerlink" title="创建一个基于 webpack 模板的新项目"></a>创建一个基于 webpack 模板的新项目</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br><span class="line"> Project name  //项目名称</span><br><span class="line"> Project description  //项目描述</span><br><span class="line"> Author //作者</span><br><span class="line"> Vue build  //vue的建立</span><br><span class="line"> Install vue-router?   //安装vue路由</span><br><span class="line"> Use ESLint to lint your code？  //该选项为使用ESLint规范你的代码，一个空格错误都将报错，不开启，避免不必要的麻烦</span><br><span class="line"> Set up unit tests？  //设置单元测试</span><br><span class="line"> Setup e2e tests with Nightwatch   // Nightwatch建立端到端的测试</span><br><span class="line"> Should we run `npm install` for you after the project has been created? (recommended) (Use arrow keys)  //确认创建项目</span><br></pre></td></tr></table></figure><p>如下图：<br><img src="/images/image1.png" alt></p><h1 id="安装依赖，走你"><a href="#安装依赖，走你" class="headerlink" title="安装依赖，走你"></a>安装依赖，走你</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd my-project  //跳转至my-project文件路径下</span><br><span class="line">npm install   //初始化webpack模块</span><br><span class="line">npm run dev   //启动服务器</span><br><span class="line">npm install vue-router vue-resource --save  //安装路由模块</span><br></pre></td></tr></table></figure><p>如下图：<br><img src="/images/image2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp添加版本功能笔记</title>
      <link href="/gulp%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E5%8A%9F%E8%83%BD%E7%AC%94%E8%AE%B0/"/>
      <url>/gulp%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E5%8A%9F%E8%83%BD%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>使用Gulp添加版本功能笔记<br><a id="more"></a></p><h1 id="安装gulp和gulp插件"><a href="#安装gulp和gulp插件" class="headerlink" title="安装gulp和gulp插件"></a>安装gulp和gulp插件</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br><span class="line">npm install --save-dev gulp-rev</span><br><span class="line">npm install --save-dev gulp-rev-collector</span><br><span class="line">npm install --save-dev gulp-asset-rev</span><br><span class="line">npm install --save-dev run-sequence</span><br></pre></td></tr></table></figure><h1 id="编写gulpfile-js"><a href="#编写gulpfile-js" class="headerlink" title="编写gulpfile.js"></a>编写gulpfile.js</h1><p> 此文件包含编译less，压缩、重命名css和js，同时可以压缩html并自动添加版本号的gulp.js配置文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">//引入gulp和gulp插件</span><br><span class="line">var gulp = require('gulp'),</span><br><span class="line">  less = require('gulp-less'),</span><br><span class="line">  assetRev = require('gulp-asset-rev'),</span><br><span class="line">  minifyCss = require('gulp-minify-css'),</span><br><span class="line">  uglify = require('gulp-uglify'),</span><br><span class="line">  htmlmin = require('gulp-htmlmin'),</span><br><span class="line">  rename = require('gulp-rename'),</span><br><span class="line">  imagemin = require('gulp-imagemin'),</span><br><span class="line">  runSequence = require('run-sequence'),</span><br><span class="line">  rev = require('gulp-rev'),</span><br><span class="line">  revCollector = require('gulp-rev-collector');</span><br><span class="line"> </span><br><span class="line">//定义css、js源文件路径</span><br><span class="line">var cssSrc = 'css/*.css',</span><br><span class="line">  cssMinSrc = 'dist/css/*.css',</span><br><span class="line">  jsSrc = 'js/*.js',</span><br><span class="line">  jsMinSrc = 'dist/js/*.js',</span><br><span class="line">  lessSrc = 'less/*.less',</span><br><span class="line">  imgMinSrc = 'dist/images/*.&#123;png,jpg,gif,ico&#125;',</span><br><span class="line">  htmlSrc = '*.html';</span><br><span class="line"> </span><br><span class="line">//编译less 定义一个less任务（自定义任务名称）</span><br><span class="line">gulp.task('less', function()&#123;</span><br><span class="line">  return gulp.src(lessSrc)  //该任务针对的文件</span><br><span class="line">   .pipe(less()) //该任务调用的模块</span><br><span class="line">   .pipe(gulp.dest('css'));//编译后的路径</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//为css中引入的图片/字体等添加hash编码</span><br><span class="line">gulp.task('assetRev', function()&#123;</span><br><span class="line">  return gulp.src(cssSrc)  //该任务针对的文件</span><br><span class="line">   .pipe(assetRev()) //该任务调用的模块</span><br><span class="line">   .pipe(gulp.dest('src')); //编译后的路径</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//压缩css</span><br><span class="line">gulp.task('cssMin', function() &#123;</span><br><span class="line">  return gulp.src(cssSrc)   //压缩的文件</span><br><span class="line">    .pipe(rename(&#123;suffix: '.min'&#125;))  </span><br><span class="line">    .pipe(minifyCss()) //执行压缩</span><br><span class="line">    .pipe(gulp.dest('dist/css'));  //输出文件夹</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//CSS生成文件hash编码并生成 rev-manifest.json文件名对照映射</span><br><span class="line">gulp.task('revCss', function()&#123;</span><br><span class="line">  return gulp.src(cssMinSrc)</span><br><span class="line">    .pipe(rev()) //文件名加MD5后缀</span><br><span class="line">    .pipe(rev.manifest())  //必须有这个方法 生成一个rev-manifest.json</span><br><span class="line">    .pipe(gulp.dest('dist/css'));  //将rev-manifest.json 保存到 dist/css 目录内</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//压缩js</span><br><span class="line">gulp.task('uglify',function()&#123;</span><br><span class="line">  return gulp.src(jsSrc)</span><br><span class="line">   .pipe(rename(&#123;suffix: '.min'&#125;))</span><br><span class="line">   .pipe(uglify())</span><br><span class="line">   .pipe(gulp.dest('dist/js'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//js生成文件hash编码并生成 rev-manifest.json文件名对照映射</span><br><span class="line">gulp.task('revJs', function()&#123;</span><br><span class="line">  return gulp.src(jsMinSrc)</span><br><span class="line">    .pipe(rev())</span><br><span class="line">    .pipe(rev.manifest())</span><br><span class="line">    .pipe(gulp.dest('dist/js'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//压缩html</span><br><span class="line">gulp.task('htmlMin',function()&#123;</span><br><span class="line">  var options = &#123;</span><br><span class="line">    collapseWhitespace:true,  //从字面意思应该可以看出来，清除空格，压缩html，这一条比较重要，作用比较大，引起的改变压缩量也特别大。</span><br><span class="line">    collapseBooleanAttributes:true,  //省略布尔属性的值，比如：<span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>,那么设置这个属性后，就会变成 <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>/&gt;</span>。</span><br><span class="line">    removeComments:true,  //清除html中注释的部分，我们应该减少html页面中的注释。</span><br><span class="line">    removeEmptyAttributes:true,  //清除所有的空属性。</span><br><span class="line">    removeScriptTypeAttributes:true,  //清除所有script标签中的type="text/javascript"属性。</span><br><span class="line">    removeStyleLinkTypeAttributes:true,  //清楚所有Link标签上的type属性。</span><br><span class="line">    minifyJS:true,  //压缩html中的javascript代码。</span><br><span class="line">    minifyCSS:true  //压缩html中的css代码。</span><br><span class="line">  &#125;;</span><br><span class="line">  return gulp.src(htmlSrc)</span><br><span class="line">   .pipe(htmlmin(options))</span><br><span class="line">   .pipe(gulp.dest('dist/html'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//Html替换css、js文件版本</span><br><span class="line">gulp.task('revHtml', function () &#123;</span><br><span class="line">  return gulp.src(['dist/**/*.json', 'dist/html/*.html'])</span><br><span class="line">    .pipe(revCollector())</span><br><span class="line">    .pipe(gulp.dest('dist/html'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//压缩image</span><br><span class="line">gulp.task('imageMin', function () &#123;</span><br><span class="line">  gulp.src('images/*.&#123;png,jpg,gif,ico&#125;')</span><br><span class="line">    .pipe(imagemin())</span><br><span class="line">    .pipe(gulp.dest('dist/images'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task('revImage', function()&#123;</span><br><span class="line">  return gulp.src(imgMinSrc)</span><br><span class="line">    .pipe(rev())</span><br><span class="line">    .pipe(rev.manifest())  //必须有这个方法</span><br><span class="line">    .pipe(gulp.dest('dist/images'));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task('default', function (done) &#123;</span><br><span class="line">  //condition = false;</span><br><span class="line">  runSequence(  //此处不能用gulp.run这个最大限度并行(异步)执行的方法，要用到runSequence这个串行方法(顺序执行)才可以在运行gulp后顺序执行这些任务并在html中加入版本号</span><br><span class="line">    'less',</span><br><span class="line">    'assetRev',</span><br><span class="line">    'cssMin',</span><br><span class="line">    'revCss',</span><br><span class="line">    'uglify',</span><br><span class="line">    'revJs',</span><br><span class="line">    'imageMin',</span><br><span class="line">    'revImage',</span><br><span class="line">    'htmlMin', </span><br><span class="line">    'revHtml',    </span><br><span class="line">    done);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>更改gulp-rev和gulp-rev-collector<br>    打开node_modules\gulp-rev\index.js<br>    第144行 manifest[originalFile] = revisionedFile;<br>    更新为: manifest[originalFile] = originalFile + ‘?v=’ + file.revHash;<br>打开nodemodules\gulp-rev\nodemodules\rev-path\index.js<br>    10行 return filename + ‘-‘ + hash + ext;<br>    更新为: return filename + ext;<br>打开node_modules\gulp-rev-collector\index.js<br>    31行 if ( !<em>.isString(json[key]) || path.basename(json[key]).replace(new RegExp( opts.revSuffix ), ‘’ ) !==  path.basename(key) ) {<br>    更新为: if ( !</em>.isString(json[key]) || path.basename(json[key]).split(‘?’)[0] !== path.basename(key) ) {<br>打开node_modules\gulp-assets-rev\index.js<br>    78行 var verStr = (options.verConnecter || “-“) + md5;<br>    更新为：var verStr = (options.verConnecter || “”) + md5;<br>    80行 src = src.replace(verStr, ‘’).replace(/(.[^.]+)$/, verStr + “$1”);<br>    更新为：src=src+”?v=”+verStr;</p><h1 id="继续更改gulp-rev-collector"><a href="#继续更改gulp-rev-collector" class="headerlink" title="继续更改gulp-rev-collector"></a>继续更改gulp-rev-collector</h1><p>打开node_modules\gulp-rev-collector\index.js<br>    第107行 regexp: new RegExp( ‘([\/\\\’”])’ + pattern, ‘g’ ),<br>    更新为: regexp: new RegExp( ‘([\/\\\’”])’ + pattern+’(\?v=\w{10})?’, ‘g’ ),</p>]]></content>
      
      
      <categories>
          
          <category> 打包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glup学习笔记</title>
      <link href="/Glup%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/Glup%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>使用Gulp打包压缩Html、Css、Js<br><a id="more"></a></p><ol><li>node.js 安装</li><li>淘宝镜像的安装：<code>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></code></li><li>全局安装gulp:<code>cnpm install –global gulp</code></li><li>项目安装gulp:<code>cnpm install –save-dev gulp</code></li><li>初始化一个package.json文件：<code>gulp init</code></li><li>然后执行:<code>cnpm install gulp –save-dev</code></li><li>项目安装gulp插件如编译less文件:<code>cnpm install –save-dev  gulp-less （less编译）</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev  gulp-sass（sass编译）</span><br><span class="line">cnpm install --save-dev gulp-uglify （JS压缩）</span><br><span class="line">cnpm install --save-dev gulp-minify-html（html压缩）</span><br><span class="line">cnpm install --save-dev gulp-concat （js文件合并）</span><br><span class="line">cnpm install –-save-dev  gulp-imagemin （图片压缩）</span><br><span class="line">cnpm install --save-dev gulp-babel  (es6语法)</span><br><span class="line">npm install --save-dev gulp-babel babel-preset-env (es6语法)</span><br><span class="line">cnpm install --save-dev babel-preset-es2015  (es6转换es5)</span><br><span class="line">cnpm install --save-dev gulp-connect  (自动刷新)</span><br></pre></td></tr></table></figure></li></ol><p>删除安装的外挂：</p><p>首先在全局安装<code>npm i -g rimraf</code>；<br>然后转到你的根目录输入  <code>rimraf -rf node_modules/package</code>(package 依旧是外挂名字  比如  <code>gulp-less</code>);</p>]]></content>
      
      
      <categories>
          
          <category> 打包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法学习笔记</title>
      <link href="/MarkDown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/MarkDown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>关于Markdown的使用手册</p><a id="more"></a><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><ol><li><p>用#标记</p><blockquote><p>在 标题开头 加上1~6个#，依次代表一级标题、二级标题….六级标题<br>#一级标题</p><blockquote><p>##二级标题<br>###三级标题<br>#####四级标题<br>######五级标题<br>######六级标题</p></blockquote></blockquote></li><li><p>用=和-标记</p><blockquote><p>在 标题底下 加上任意个=代表一级标题，-代表二级标题</p><blockquote><p>This is an H1 =============<br>This is an H2 ————-</p></blockquote></blockquote></li></ol><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>1.无序列表：在文字前加上 *、-或+即可变成无序列表</p><blockquote><ul><li>*red</li></ul><ul><li>+blue</li></ul><ul><li>-green</li></ul></blockquote><p>2.有序列表：在文字前加上1.2.3.即可变成有序列表</p><blockquote><ol><li>red</li><li>blue</li><li>green</li></ol></blockquote><blockquote><p>注：符号和文字之间加上一个字符的空格</p></blockquote><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</p><blockquote><p>这是一段引用    //在<code>&gt;</code>后面有 1 个空格</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre><p>代码例子：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>在一行中用三个以上的*、-、_来建立一个分隔线</p><hr><hr><hr><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>两个<em>或_代表加粗，一个</em>或-代表斜体，~~代表删除</p><p><strong>加粗文本</strong> 或者 <strong>加粗</strong><br><em>斜体</em> 或者 _斜体_<br><del>删除</del><br>注：前后都需要添加</p><p>#图片与链接</p><p>图片为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure></p><ul><li>Alt text 为如果图片无法显示时显示的文字</li><li>/path/to/img.jpg 为图片所在路径 路径可以使用绝对路径也可以使用相对路径，建议使用绝对路径</li><li>Optional title 显示标题。显示效果为在你将鼠标放到图片上后，会显示一个小框提示，提示内容就是Option title 里的内容</li><li><p>迁入HTML代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img scr=&quot;./xxx.png&quot; width = &quot;300&quot; height = &quot;200&quot; alt = &quot;图片名称&quot; align = center /&gt;</span><br><span class="line"></span><br><span class="line">*&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">&lt;img/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>链接为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]()</span><br></pre></td></tr></table></figure></li></ul><h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github搭建博客笔记</title>
      <link href="/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
      <url>/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>基于Hexo和github搭建的个人博客，安装过程及问题在此做的不定期整理，并会随时上传至github平台<br><a id="more"></a></p><p>#安装Node<br><a href="http://nodejs.cn/" target="_blank" rel="noopener">node官网下载</a></p><ol><li>根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧。如图：<br><img src="http://ww3.sinaimg.cn/large/9fe4afa0gw1faljhotcr1j20dv0atq4u.jpg" alt="node安装"></li><li>保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口。如图：<br><img src="http://ww3.sinaimg.cn/large/9fe4afa0gw1faljikc6nbj20bh06l3z7.jpg" alt="node安装"></li><li>在新打开的窗口中输入cmd，敲击回车，打开命令行界面。（下文将直接用打开命令行来表示以上操作，记住哦~） 在打开的命令行界面中，输入：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ol><p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。<br><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1faljiuibwdj20it0cb3zd.jpg" alt="node安装"></p><p>#安装Git<br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网下载</a></p><ul><li>和Node.js一样，设置都只需要保持默认</li><li>打开命令行，输入<code>git –version</code>检查是否安装正确,如图：<br><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faljp87tpkj20it0cbdgo.jpg" alt="Git安装检查"></li></ul><h1 id="github账户的注册和配置"><a href="#github账户的注册和配置" class="headerlink" title="github账户的注册和配置"></a>github账户的注册和配置</h1><ol><li>登录进github <a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a></li><li>创建代码库<br>登陆之后，点击页面右上角的加号，选择New repository 如图：<br><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faljww56v8j20ci0a975c.jpg" alt="创建代码库"><br>进入代码库创建页面：<br>在Repository name下填写 yourname.github.io 如图：<br><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1faljv7hoqhj20p40fz0vo.jpg" alt="创建代码库"><br><strong> 注意：比如我的github名称是qq785478075 ,这里你就填 qq785478075.github.io,如果你的名字是xujun，那你就填 xujun.github.io </strong></li></ol><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><strong> 安装Hexo——确保电脑已经安装Node.js以及Git环境 </strong><br><strong> 命令行在git bash下输入 </strong></p><ol><li><p>命令行输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli #全局安装</span><br><span class="line">$ npm install hexo --save</span><br></pre></td></tr></table></figure></li><li><p>查看是否安装成功</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure></li><li><p>Hexo相关配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init #初始化hexo</span><br><span class="line">$ npm install #安装所需要的组件(生成器)</span><br><span class="line">$ hexo s #运行</span><br></pre></td></tr></table></figure></li></ol><h1 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h1><ol><li><p>配置身份信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config -- golbal user.name "yourname"</span><br><span class="line">$ git config -- golbal user.email "youremail"</span><br><span class="line">$ ssh-keygen -t rsa -C "youremail" #生成密钥，密钥位置会给出提示 id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>配置身份信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">branch；master</span><br><span class="line">注：这里的repo中填写的是SSH-Key</span><br></pre></td></tr></table></figure></li><li><p>连接代码库<br>登录Github，点击头像下的settings，添加ssh</p><p>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去</p><p>输入 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</p></li><li><p>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save </p></li><li><p>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了    </p><blockquote><p>假如ssh-key配置失败，那么只要以下步骤就能完全解决<br>首先，清除所有的key-pair<br>ssh-add -D<br>rm -r ~/.ssh<br>删除你在github中的public-key<br>重新生成ssh密钥对<br>ssh-keygen -t rsa -C “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“</p></blockquote></li></ol><h1 id="备份分支源文件"><a href="#备份分支源文件" class="headerlink" title="备份分支源文件"></a>备份分支源文件</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//git 文件添加</span><br><span class="line">git add .</span><br><span class="line">//git 提交</span><br><span class="line">git commit -m "init"</span><br><span class="line">//push到hexo分支</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
